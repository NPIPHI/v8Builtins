//
// Created by 16182 on 1/10/2021.
//

#ifndef V8DEBUGGER_GLUE_H
#define V8DEBUGGER_GLUE_H

const char * glue_code = ""
                         "{\n"
                         "let _log = console.log; console.log = (...args)=>{cppLog(...args); _log(...args)};\n"
                         "let _warn = console.warn; console.warn = (...args)=>{cppWarn(...args); _warn(...args)};\n"
                         "let _error = console.error; console.error = (...args)=>{cppError(...args); _error(...args)};\n"
                         "let _info = console.info; console.info = (...args)=>{cppInfo(...args); _info(...args)};\n"
                         "}\n"
                         "\n"
                         "if(!globalThis.window) window = globalThis;\n"
                         "if(!window.location) window.location = {}\n"
                         "\n"
                         "performance = {\n"
                         "    now: ()=>cppPerfNow(),\n"
                         "}\n"
                         "\n"
                         "sessionStorage = undefined;\n"
                         "\n"
                         "function setTimeout(callback, delay, ...args){\n"
                         "    if(typeof callback != \"function\"){\n"
                         "        throw new TypeError(\"Argument 0 must be a function\");\n"
                         "    }\n"
                         "    if(typeof delay == \"undefined\"){\n"
                         "        return cppSetTimeout(()=>callback(...args), 0);\n"
                         "    } else if(typeof delay == \"number\"){\n"
                         "        return cppSetTimeout(()=>callback(...args), delay);\n"
                         "    } else {\n"
                         "        throw new TypeError(\"Argument 1 must be a number\");\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "function clearTimeout(index){\n"
                         "    if(typeof index == \"number\"){\n"
                         "        cppClearTimeout(index);\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "\n"
                         "function setInterval(callback, delay, ...args){\n"
                         "    if(typeof callback != \"function\"){\n"
                         "        throw new TypeError(\"Argument 0 must be a function\");\n"
                         "    }\n"
                         "    if(typeof delay == \"undefined\"){\n"
                         "        return cppSetInterval(()=>callback(...args), 0);\n"
                         "    } else if(typeof delay == \"number\"){\n"
                         "        return cppSetInterval(()=>callback(...args), delay);\n"
                         "    } else {\n"
                         "        throw new TypeError(\"Argument 1 must be a number\");\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "function clearInterval(index){\n"
                         "    if(typeof index == \"number\"){\n"
                         "        cppClearInterval(index);\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "FetchResult = class{\n"
                         "    constructor(data){\n"
                         "        this.data = data;\n"
                         "    }\n"
                         "    text(){\n"
                         "        return new Promise(r=>r(cppUTF8Decode(this.data)));\n"
                         "    }\n"
                         "    json(){\n"
                         "        return new Promise(r=>r(JSON.parse(cppUTF8Decode(this.data))));\n"
                         "    }\n"
                         "    arrayBuffer(){\n"
                         "        return new Promise(r=>r(this.data));\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "WebSocket = class{\n"
                         "    constructor(address){\n"
                         "        if(!address.startsWith(\"ws://\")) throw new Error(\"only ws:// supported\");\n"
                         "        address = address.substr(5);\n"
                         "        let sub_start = address.search('/');\n"
                         "        if(sub_start == -1) sub_start = address.length;\n"
                         "        let addr = address.substr(0, sub_start);\n"
                         "        let sub = address.substr(sub_start+1);\n"
                         "        let port_start = address.search(':');\n"
                         "        let port = 80;\n"
                         "        if(port_start != -1){\n"
                         "            port = parseInt(address.substr(port_start+1, sub_start));\n"
                         "            addr = address.substr(0,port_start);\n"
                         "        }\n"
                         "        cppAttachWs(this, addr, port, sub);\n"
                         "        this.onmessage = ()=>{}\n"
                         "        this.__onmessage = msg=>this.onmessage({data: msg});\n"
                         "        this.onclose = ()=>{}\n"
                         "        this.onopen = ()=>{}\n"
                         "    }\n"
                         "}\n"
                         "\n"
                         "window.WebSocket = WebSocket;\n"
                         "\n"
                         "function fetch(url, options){\n"
                         "    if(typeof options != \"undefined\"){\n"
                         "        throw new Error(\"options are not supported\");\n"
                         "    }\n"
                         "    return new Promise((resolve, reject)=>{\n"
                         "        cppFetch(url).then(\n"
                         "        (data)=>{\n"
                         "            resolve(new FetchResult(data));\n"
                         "        },\n"
                         "        ()=>{\n"
                         "            reject();\n"
                         "        }\n"
                         "        );\n"
                         "    });\n"
                         "}\n"
                         "\n"
                         "function deepCopy(obj){\n"
                         "    return cppDeepCopy(obj);\n"
                         "}\n"
                         "\n"
                         "function jsonCopy(obj){\n"
                         "    return JSON.parse(JSON.stringify(obj));\n"
                         "}";

#endif //V8DEBUGGER_GLUE_H
